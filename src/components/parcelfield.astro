<div id="parcelfield" class="absolute inset-0">
  <canvas id="parcelfield-canvas"></canvas>

  <script>
    import invariant from "tiny-invariant";

    const COUNT = 15;
    const SPEED = 0.1;

    class Parcel {
      x: number;
      y: number;
      z: number;
      xPrev: number;
      yPrev: number;
      image0: HTMLImageElement;
      image1: HTMLImageElement;
      image2: HTMLImageElement;
      image3: HTMLImageElement;
      currImage: HTMLImageElement | null;

      constructor(
        x = 0,
        y = 0,
        z = 0,
        image0: HTMLImageElement,
        image1: HTMLImageElement,
        image2: HTMLImageElement,
        image3: HTMLImageElement
      ) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.xPrev = x;
        this.yPrev = y;
        this.image0 = image0;
        this.image1 = image1;
        this.image2 = image2;
        this.image3 = image3;
        this.currImage = null;
      }

      setCurrImage(canvasWidth: number, canvasHeight: number) {
        if (
          // somewhere in the innermost area of canvas
          (-canvasWidth / 8 > this.x || this.x < canvasWidth / 8) &&
          (-canvasHeight / 8 > this.y || this.y < canvasHeight / 8)
        ) {
          this.currImage = this.image0;
          // console.log(
          //   `set current image to image0 with w: ${this.x} of ${canvasWidth / 2} and h: ${this.y} of ${canvasHeight / 2}`
          // );
        } else if (
          // somewhere in the second ring of canvas
          ((-canvasWidth * 2) / 8 > this.x || this.x < (canvasWidth * 2) / 8) &&
          ((-canvasHeight * 2) / 8 > this.y || this.y < (canvasHeight * 2) / 8)
        ) {
          this.currImage = this.image1;
          // console.log(
          //   `set current image to image1 with w: ${this.x} of ${canvasWidth / 2} and h: ${this.y} of ${canvasHeight / 2}`
          // );
        } else if (
          // somewhere in the third ring of canvas
          ((-canvasWidth * 3) / 8 > this.x || this.x < (canvasWidth * 3) / 8) &&
          ((-canvasHeight * 3) / 8 > this.y || this.y < (canvasHeight * 3) / 8)
        ) {
          this.currImage = this.image2;
          // console.log(
          //   `set current image to image2 with w: ${this.x} of ${canvasWidth / 2} and h: ${this.y} of ${canvasHeight / 2}`
          // );
        } else {
          // somewhere in the outer ring of canvas
          this.currImage = this.image3;
          // console.log(
          //   `set current image to image3 with w: ${this.x} of ${canvasWidth / 2} and h: ${this.y} of ${canvasHeight / 2}`
          // );
        }
      }

      update(canvasWidth: number, canvasHeight: number, speed: number) {
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z += speed * 0.0675;
        this.x += this.x * (speed * 0.0225) * this.z;
        this.y += this.y * (speed * 0.0225) * this.z;
        if (
          this.x > canvasWidth / 2 ||
          this.x < -canvasWidth / 2 ||
          this.y > canvasHeight / 2 ||
          this.y < -canvasHeight / 2
        ) {
          this.x = Math.random() * canvasWidth - canvasWidth / 2;
          this.y = Math.random() * canvasHeight - canvasHeight / 2;
          this.xPrev = this.x;
          this.yPrev = this.y;
          this.z = 0;
        }
      }

      draw(ctx: CanvasRenderingContext2D) {
        // const size = this.z * 0.5 + 0.5; // Adjust size based on z-position
        const size = this.currImage!.width;
        ctx.globalAlpha = this.z * 0.5 + 0.5; // Adjust opacity based on z-position
        // console.log(
        //   `draw(${this.currImage!.src} ${this.x - size / 2}, ${this.y - size / 2}, ${size}, ${size})`
        // );
        ctx.drawImage(
          this.currImage!,
          this.x - size / 2,
          this.y - size / 2,
          size,
          size
        );
        ctx.globalAlpha = 1;
      }
    }

    // In your setup function:
    const parcelImages = [
      "/03_ParcelPixelArt2-Small_0.png",
      "/03_ParcelPixelArt2-Small_1.png",
      "/03_ParcelPixelArt2-Small_2.png",
      "/03_ParcelPixelArt2-Small_3.png",
    ].map((src) => {
      const img = new Image();
      img.src = src;
      return img;
    });

    const parcels = Array.from(
      { length: COUNT },
      () =>
        new Parcel(
          0,
          0,
          0,
          parcelImages[0],
          parcelImages[1],
          parcelImages[2],
          parcelImages[3]
        )
    );
    let rafId = 0;

    const canvas = document.querySelector(
      "#parcelfield-canvas"
    ) as HTMLCanvasElement;
    invariant(canvas, "canvas should not be null");
    const ctx = canvas.getContext("2d");

    const container = document.querySelector("#parcelfield") as HTMLElement;
    invariant(container, "container should not be null");
    const resizeObserver = new ResizeObserver(setup);
    resizeObserver.observe(container);

    function setup() {
      invariant(ctx, "canvas context should not be null");
      rafId > 0 && cancelAnimationFrame(rafId);

      const { clientWidth: width, clientHeight: height } = container;
      const dpr = window.devicePixelRatio || 1;
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      canvas.style.width = `${width}px`;
      canvas.style.height = `${height}px`;
      ctx.scale(dpr, dpr);

      for (const parcel of parcels) {
        parcel.x = Math.random() * width - width / 2;
        parcel.y = Math.random() * height - height / 2;
        parcel.z = 0;
        parcel.setCurrImage(width, height);
      }

      ctx.translate(width / 2, height / 2);
      ctx.fillStyle = "rgba(0, 0, 0, 0.4)";
      ctx.strokeStyle = "white";
      rafId = requestAnimationFrame(frame);
    }

    function frame() {
      // console.log("frame");
      invariant(ctx, "canvas context should not be null");
      const { clientWidth: width, clientHeight: height } = container;

      for (const parcel of parcels) {
        parcel.update(width, height, SPEED);
        parcel.draw(ctx);
        parcel.setCurrImage(width, height);
      }

      ctx.fillRect(-width / 2, -height / 2, width, height);
      rafId = requestAnimationFrame(frame);
    }
  </script>
</div>
